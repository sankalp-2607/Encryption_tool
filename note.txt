### 1. **`main.cpp`**

* Ye file sirf **program ka entry point** hota hai (main function).
* Isme tum program ka **flow** likhte ho:

  * Input lena
  * User se choice puchna (encrypt/decrypt)
  * Function ko call karna
* Matlab ye bas “program ka remote control” hai.

---

### 2. **`encryption.cpp`**

* Ye file tumhare **function ka actual implementation** rakhti hai.

  * Jaise tumne `encryptFile(...)` function likha tha, uska pura code yaha hoga.
* Matlab **logic/code ka kaam** yaha hota hai.

---

### 3. **`encryption.h` (header file)**

* Ye ek **declaration file** hai.
* Isme tum sirf **function ka prototype (declaration)** likhte ho, implementation nahi.

  ```cpp
  // encryption.h
  #ifndef ENCRYPTION_H
  #define ENCRYPTION_H

  #include <string>
  bool encryptFile(const std::string& filename, bool encrypt);

  #endif
  ```
* Fir tum isko `main.cpp` me `#include "encryption.h"` karke use karte ho.

---

### 🔑 Why split into 3 files?

1. **Code organization** → Program readable aur clean rehta hai.

   * `main.cpp` → control
   * `encryption.cpp` → logic
   * `encryption.h` → interface

2. **Reusability** → Agar kal ko tum dusre project me `encryptFile()` use karna chaho to bas `encryption.cpp` aur `encryption.h` copy kardo. `main.cpp` ko chhedne ki zarurat nahi.

3. **Teamwork** → Professional projects me alag-alag developers alag files pe kaam karte hain. Ek banda `main.cpp` pe, doosra banda `encryption.cpp` pe.

4. **Faster compilation** → Agar tum sirf `encryption.cpp` badalte ho to poora project dobara compile nahi karna padta.

---

👉 Matlab simple shabdon me:

* **header file (.h)** = “menu card” (sirf dikhata hai ki kya functions available hain).
* **cpp file** = “kitchen” (waha asli kaam hota hai).
* **main.cpp** = “waiter” (jo order leta hai aur kitchen se serve karata hai).

---

Bhai, chaahe mai tujhe isko ek **chhota sa working example** bana kar dikhaun jo 3 alag files me ho?
